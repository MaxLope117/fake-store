// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Products;
//
//    var priceMultiFullApiResponse = PriceMultiFullApiResponse.FromJson(jsonString);

namespace Product
{
  using System;
  using System.Collections.Generic;

  using System.Globalization;
  using Newtonsoft.Json;
  using Newtonsoft.Json.Converters;

  public partial class PriceMultiFullApiResponse
  {
    [JsonProperty("id")]
    public long Id { get; set; }

    [JsonProperty("title")]
    public string Title { get; set; }

    [JsonProperty("price")]
    public double Price { get; set; }

    [JsonProperty("description")]
    public string Description { get; set; }

    [JsonProperty("category")]
    public Category Category { get; set; }

    [JsonProperty("image")]
    public Uri Image { get; set; }

    [JsonProperty("rating")]
    public Rating Rating { get; set; }
  }

  public partial class Rating
  {
    [JsonProperty("rate")]
    public double Rate { get; set; }

    [JsonProperty("count")]
    public long Count { get; set; }
  }

  public enum Category { Electronics, Jewelery, MenSClothing, WomenSClothing };

  public partial class PriceMultiFullApiResponse
  {
    public static List<PriceMultiFullApiResponse> FromJson(string json) => JsonConvert.DeserializeObject<List<PriceMultiFullApiResponse>>(json, Product.Converter.Settings);
  }

  public static class Serialize
  {
    public static string ToJson(this List<PriceMultiFullApiResponse> self) => JsonConvert.SerializeObject(self, Product.Converter.Settings);
  }

  internal static class Converter
  {
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
      MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
      DateParseHandling = DateParseHandling.None,
      Converters =
            {
                CategoryConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
    };
  }

  internal class CategoryConverter : JsonConverter
  {
    public override bool CanConvert(Type t) => t == typeof(Category) || t == typeof(Category?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
      if (reader.TokenType == JsonToken.Null) return null;
      var value = serializer.Deserialize<string>(reader);
      switch (value)
      {
        case "electronics":
          return Category.Electronics;
        case "jewelery":
          return Category.Jewelery;
        case "men's clothing":
          return Category.MenSClothing;
        case "women's clothing":
          return Category.WomenSClothing;
      }
      throw new Exception("Cannot unmarshal type Category");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
      if (untypedValue == null)
      {
        serializer.Serialize(writer, null);
        return;
      }
      var value = (Category)untypedValue;
      switch (value)
      {
        case Category.Electronics:
          serializer.Serialize(writer, "electronics");
          return;
        case Category.Jewelery:
          serializer.Serialize(writer, "jewelery");
          return;
        case Category.MenSClothing:
          serializer.Serialize(writer, "men's clothing");
          return;
        case Category.WomenSClothing:
          serializer.Serialize(writer, "women's clothing");
          return;
      }
      throw new Exception("Cannot marshal type Category");
    }

    public static readonly CategoryConverter Singleton = new CategoryConverter();
  }
}


// namespace FakeStore.Models;

// public partial class Product
// {
//   public long Id { get; set; }

//   public string? Title { get; set; }

//   public double Price { get; set; }

//   public string? Description { get; set; }

//   public Category Category { get; set; }

//   public Uri? Image { get; set; }

//   public Rating? Rating { get; set; }
// }

// public partial class Rating
// {
//   public double Rate { get; set; }

//   public long Count { get; set; }
// }

// public enum Category { Electronics, Jewelery, MenSClothing, WomenSClothing };

